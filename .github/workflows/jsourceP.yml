# jsource for previous JEP version
# names have "P" (prev) suffix, e.g. l64P.zip

name: JEP

on:
 push:
  branches:
   - '9.4'

jobs:

# linux ----------------------------------------------------------------
 jelinux:
  name: JEP (Linux)
  runs-on: ubuntu-20.04
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Setup SDE binaries
     uses: petarpetrovt/setup-sde@v2

   - name: Setup Environment (Linux)
     run: script/install-lnx.sh

   - name: Build JEP (Linux)
     env:
      CC: clang
      USE_SLEEF: 1
     run: |
      echo $SDE_PATH
      $SDE_PATH/sde -help || true
      script/buildga.sh linux || exit 1

   - name: Test JEP (Linux)
     run: |
      script/testga.sh linux || exit 1
      ls -l j64
      cd j64
      strip -S jconsole
      strip -S libj.so
      strip -S libjavx2.so || true
      strip -S libjavx512.so || true
      strip -S libtsdll.so
      strip -S jamalgam || true
      strip -S libgmp.so
      cd ..
      ls -l j64
      zip -r l64P.zip j64

   - name: Release JEP (Linux)
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "l64P.zip,versionP.txt"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Copy Test (Linux)
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testlinux.txt

# macOS ----------------------------------------------------------------
 jemacos:
  name: JEP (macOS)
  runs-on: macos-12
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Build JEP (macOS)
     env:
      CC: clang
      USE_SLEEF: 1
     run: |
      script/buildga.sh darwin || exit 1

   - name: Test JEP (macOS)
     run: |
      script/testga.sh darwin || exit 1
      rm -rf j64/jconsole.dSYM
      rm -rf j64/libj.dylib.dSYM
      rm -rf j64/libjavx2.dylib.dSYM
      rm -rf j64/libjavx512.dylib.dSYM
      rm -rf j64/libtsdll.dylib.dSYM
      rm -rf j64/jamalgam.dSYM
      ls -l j64
      cd j64
      strip -S jconsole
      strip -S libj.dylib
      strip -S libjavx2.dylib || true
      strip -S libjavx512.dylib || true
      strip -S libtsdll.dylib
      strip -S jamalgam || true
      strip -S libgmp.dylib
      cd ..
      ls -l j64
      zip -r m64P.zip j64

   - name: Release JEP (macOS)
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "m64P.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Copy Test (macOS)
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testdarwin.txt

# rpi64 ----------------------------------------------------------------
 jerpi64:
  name: JEP (Raspberry)
  runs-on: ubuntu-20.04
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Build, Test JEP (Raspberry)
     uses: pguyot/arm-runner-action@v2
     with:
      cpu: cortex-a53
      cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
      base_image: raspios_lite_arm64:latest
      image_additional_mb: 1024
      copy_artifact_path: j64
      commands: |
       apt-get install --no-install-recommends -y clang zip
       export CC=clang
       export USE_SLEEF=1
       script/buildga.sh raspberry || exit 1
       script/testga.sh raspberry || exit 1
       ls -l j64
       cd j64
       strip -S jconsole
       strip -S libj.so
       strip -S libtsdll.so
       strip -S jamalgam || true
       strip -S libgmp.so
       cd ..
       zip -r rpi64P.zip j64
       rm -rf j64
       mkdir j64
       mv rpi64P.zip j64/.
       mv testrpi64.txt j64/.
       find j64 -type d -exec chmod a+rwx {} \;
       find j64 -type f -exec chmod a+rw {} \;

   - name: Compress Files (Raspberry)
     run: |
      ls -l j64
      mv j64/* .

   - name: Release JEP (Raspberry)
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "rpi64P.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Copy Test (Raspberry)
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testrpi64.txt

# rpi32 ----------------------------------------------------------------
 jerpi32:
  name: JEP (Raspberry32)
  runs-on: ubuntu-20.04
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Build, Test JEP (Raspberry 32)
     uses: pguyot/arm-runner-action@v2
     with:
      cpu: arm1176
      cpu_info: cpuinfo/raspberrypi_zero2_w
      base_image: raspbian_lite:2020-02-13
      image_additional_mb: 1024
      copy_artifact_path: j32
      commands: |
       apt-get install --no-install-recommends -y zip
       export CC=gcc
       export USE_SLEEF=0
       script/buildga.sh raspberry || exit 1
       script/testga.sh raspberry || exit 1
       find j32 -type d -exec chmod a+rwx {} \;
       find j32 -type f -exec chmod a+rw {} \;
       ls -l j32
       cd j32
       strip -S jconsole
       strip -S libj.so
       strip -S libtsdll.so
       strip -S jamalgam || true
       strip -S libgmp.so
       cd ..
       zip -r rpi32P.zip j32
       rm -rf j32
       mkdir j32
       mv rpi32P.zip j32/.
       mv testrpi32.txt j32/.
       find j32 -type d -exec chmod a+rwx {} \;
       find j32 -type f -exec chmod a+rw {} \;

   - name: Compress Files (Raspberry32)
     run: |
      ls -l j32
      mv j32/* .

   - name: Release JEP (Raspberry32)
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "rpi32P.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Copy Test (Raspberry)
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testrpi32.txt

# openbsd --------------------------------------------------------------
 jeopenbsd2:
  name: JEP (OpenBSD cross-platform-actions)
  runs-on: macos-12
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Build, Test JEP (OpenBSD)
     uses: cross-platform-actions/action@v0.10.0
     with:
      operating_system: openbsd
      architecture: x86-64
      version: '7.2'
      shell: bash

      run: |
       rm -f jobdone
       sudo rdate time.cloudflare.com || true
       sudo pkg_add curl zip gmake nasm pcre2 libedit
       /sbin/ldconfig -r
       ls -al ~/
       ls -al ~/.ssh
       sudo echo "Host *" >>~/.ssh/config || true
       sudo echo " ServerAliveInterval 20" >>~/.ssh/config || true
       sudo echo " ServerAliveCountMax 2000000" >>~/.ssh/config || true
       echo "client ssh config"
       sudo cat ~/.ssh/config || true
       export CC=clang
       export USE_SLEEF=1
       script/buildga.sh openbsd || exit 1
       script/testga.sh openbsd || exit 1
       ls -l j64
       cd j64
       strip -S jconsole
       strip -S libj.so
       strip -S libjavx2.so || true
       strip -S libjavx512.so || true
       strip -S libtsdll.so
       strip -S jamalgam || true
       strip -S libgmp.so
       cd ..
       ls -l j64
       zip -r obsd64P.zip j64
       touch jobdone

   - name: Check Status (OpenBSD)
     run: |
      test -f jobdone || exit 1

   - name: Release JEP (OpenBSD)
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "obsd64P.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Copy Test (OpenBSD)
     uses: actions/upload-artifact@v2
     with:
      name: dist
      path: testopenbsd.txt

# freebsd --------------------------------------------------------------
 jefreebsd2:
  name: JEP (FreeBSD cross-platform-actions)
  runs-on: ubuntu-latest
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Build, Test JEP (FreeBSD)
     uses: cross-platform-actions/action@v0.10.0
     with:
      operating_system: freebsd
      architecture: x86-64
      version: '13.1'
      shell: bash

      run: |
       rm -f jobdone
       export IGNORE_OSVERSION=yes
       sudo rdate time.cloudflare.com || true
       sudo pkg install -y curl zip gmake nasm pcre2 libedit
       /sbin/ldconfig -r
       ls -al ~/
       ls -al ~/.ssh
       sudo echo "Host *" >>~/.ssh/config || true
       sudo echo " ServerAliveInterval 20" >>~/.ssh/config || true
       sudo echo " ServerAliveCountMax 2000000" >>~/.ssh/config || true
       echo "client ssh config"
       sudo cat ~/.ssh/config || true
       export CC=clang
       export USE_SLEEF=1
       script/buildga.sh freebsd || exit 1
       script/testga.sh freebsd || exit 1
       ls -l j64
       cd j64
       strip -S jconsole
       strip -S libj.so
       strip -S libjavx2.so || true
       strip -S libjavx512.so || true
       strip -S libtsdll.so
       strip -S jamalgam || true
       strip -S libgmp.so
       cd ..
       ls -l j64
       zip -r fbsd64P.zip j64
       touch jobdone

   - name: Check Status (FreeBSD)
     run: |
      test -f jobdone || exit 1

   - name: Release JEP (FreeBSD)
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "fbsd64P.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Copy Test (FreeBSD)
     uses: actions/upload-artifact@v2
     with:
      name: dist
      path: testfreebsd.txt

# android --------------------------------------------------------------
 jeandroid:
  name: JEP (android)
  runs-on: macos-12
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Setup Environment (android)
     uses: nttld/setup-ndk@v1
     with:
      ndk-version: r25c
      local-cache: true

   - name: Build JEP (android)
     env:
      CC: clang
      USE_SLEEF: 1
     run: |
      script/buildga.sh android || exit 1
      mv androidlibs.zip androidlibsP.zip

   - name: Release JEP (android)
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "androidlibsP.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

# windows --------------------------------------------------------------
 jewin:
  name: JEP (Windows)
  runs-on: windows-2022
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Setup Environment (Windows)
     uses: ilammy/msvc-dev-cmd@v1
     with:
      arch: amd64

   - name: Build JEP (Windows)
     shell: cmd
     run: |
      script\buildga.cmd x64

   - name: Test JEP (Windows)
     shell: cmd
     run: |
      script\testga.cmd x64

   - name: Compress Files (Windows)
     shell: pwsh
     run: Compress-Archive j64 w64P.zip

   - name: Release JEP (Windows)
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "w64P.zip"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

   - name: Copy Test (Windows)
     uses: actions/upload-artifact@v2
     with:
       name: dist
       path: testwin.txt

# get tests ------------------------------------------------------------
 tests:
  name: Test Results
  runs-on: ubuntu-20.04
  needs: [jelinux, jemacos, jerpi64, jerpi32, jewin, jeandroid, jefreebsd2, jeopenbsd2]
  steps:
   - name: Checkout Git repository
     uses: actions/checkout@v2

   - name: Get Test Results
     uses: actions/download-artifact@v2
     with:
      name: dist

   - name: Merge Test Results
     run: script/testgares.sh

   - name: Copy Tests to Build
     uses: ncipollo/release-action@v1
     with:
      tag: build
      artifacts: "tests.txt"
      token: ${{ secrets.GITHUB_TOKEN }}
      allowUpdates: true
      replacesArtifacts: true

 webhook:
  name: Run Webhook
  runs-on: ubuntu-22.04
  needs: tests
  steps:
   - name: update server
     uses: distributhor/workflow-webhook@v2
     env:
      webhook_url: ${{ secrets.WEBHOOK_URL }}
      webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
      data: '{ "id": "jebuild" }'
